using System;
using System.Collections.Generic;
using System.Security.Cryptography;

namespace DamienG.Security.Cryptography
{
	// Token: 0x02000141 RID: 321
	public sealed class Crc32 : HashAlgorithm
	{
		// Token: 0x060008B5 RID: 2229 RVA: 0x0000D2DE File Offset: 0x0000B4DE
		public Crc32() : this(3988292384U, uint.MaxValue)
		{
		}

		// Token: 0x060008B6 RID: 2230 RVA: 0x0004AD14 File Offset: 0x00048F14
		public Crc32(uint polynomial, uint seed)
		{
			this.table = Crc32.InitializeTable(polynomial);
			this.hash = seed;
			this.seed = seed;
		}

		// Token: 0x060008B7 RID: 2231 RVA: 0x0000D2EC File Offset: 0x0000B4EC
		public override void Initialize()
		{
			this.hash = this.seed;
		}

		// Token: 0x060008B8 RID: 2232 RVA: 0x0000D2FA File Offset: 0x0000B4FA
		protected override void HashCore(byte[] array, int ibStart, int cbSize)
		{
			this.hash = Crc32.CalculateHash(this.table, this.hash, array, ibStart, cbSize);
		}

		// Token: 0x060008B9 RID: 2233 RVA: 0x0000D316 File Offset: 0x0000B516
		protected override byte[] HashFinal()
		{
			return Crc32.UInt32ToBigEndianBytes(~this.hash);
		}

		// Token: 0x1700018D RID: 397
		// (get) Token: 0x060008BA RID: 2234 RVA: 0x0000D324 File Offset: 0x0000B524
		public override int HashSize
		{
			get
			{
				return 32;
			}
		}

		// Token: 0x060008BB RID: 2235 RVA: 0x0000D328 File Offset: 0x0000B528
		public static uint Compute(byte[] buffer)
		{
			return Crc32.Compute(uint.MaxValue, buffer);
		}

		// Token: 0x060008BC RID: 2236 RVA: 0x0000D331 File Offset: 0x0000B531
		public static uint Compute(uint seed, byte[] buffer)
		{
			return Crc32.Compute(3988292384U, seed, buffer);
		}

		// Token: 0x060008BD RID: 2237 RVA: 0x0000D33F File Offset: 0x0000B53F
		public static uint Compute(uint polynomial, uint seed, byte[] buffer)
		{
			return ~Crc32.CalculateHash(Crc32.InitializeTable(polynomial), seed, buffer, 0, buffer.Length);
		}

		// Token: 0x060008BE RID: 2238 RVA: 0x0004AD44 File Offset: 0x00048F44
		private static uint[] InitializeTable(uint polynomial)
		{
			if (polynomial == 3988292384U && Crc32.defaultTable != null)
			{
				return Crc32.defaultTable;
			}
			uint[] array = new uint[256];
			for (int i = 0; i < 256; i++)
			{
				uint num = (uint)i;
				for (int j = 0; j < 8; j++)
				{
					if ((num & 1U) == 1U)
					{
						num = (num >> 1 ^ polynomial);
					}
					else
					{
						num >>= 1;
					}
				}
				array[i] = num;
			}
			if (polynomial == 3988292384U)
			{
				Crc32.defaultTable = array;
			}
			return array;
		}

		// Token: 0x060008BF RID: 2239 RVA: 0x0004ADB4 File Offset: 0x00048FB4
		private static uint CalculateHash(uint[] table, uint seed, IList<byte> buffer, int start, int size)
		{
			uint num = seed;
			for (int i = start; i < start + size; i++)
			{
				num = (num >> 8 ^ table[(int)((uint)buffer[i] ^ (num & 255U))]);
			}
			return num;
		}

		// Token: 0x060008C0 RID: 2240 RVA: 0x0004ADEC File Offset: 0x00048FEC
		private static byte[] UInt32ToBigEndianBytes(uint uint32)
		{
			byte[] bytes = BitConverter.GetBytes(uint32);
			if (BitConverter.IsLittleEndian)
			{
				Array.Reverse(bytes);
			}
			return bytes;
		}

		// Token: 0x04000663 RID: 1635
		public const uint DefaultPolynomial = 3988292384U;

		// Token: 0x04000664 RID: 1636
		public const uint DefaultSeed = 4294967295U;

		// Token: 0x04000665 RID: 1637
		private static uint[] defaultTable;

		// Token: 0x04000666 RID: 1638
		private static readonly ulong[] crc32TableLittleEndian = new ulong[]
		{
			0UL,
			1996959894UL,
			3993919788UL,
			2567524794UL,
			124634137UL,
			1886057615UL,
			3915621685UL,
			2657392035UL,
			249268274UL,
			2044508324UL,
			3772115230UL,
			2547177864UL,
			162941995UL,
			2125561021UL,
			3887607047UL,
			2428444049UL,
			498536548UL,
			1789927666UL,
			4089016648UL,
			2227061214UL,
			450548861UL,
			1843258603UL,
			4107580753UL,
			2211677639UL,
			325883990UL,
			1684777152UL,
			4251122042UL,
			2321926636UL,
			335633487UL,
			1661365465UL,
			4195302755UL,
			2366115317UL,
			997073096UL,
			1281953886UL,
			3579855332UL,
			2724688242UL,
			1006888145UL,
			1258607687UL,
			3524101629UL,
			2768942443UL,
			901097722UL,
			1119000684UL,
			3686517206UL,
			2898065728UL,
			853044451UL,
			1172266101UL,
			3705015759UL,
			2882616665UL,
			651767980UL,
			1373503546UL,
			3369554304UL,
			3218104598UL,
			565507253UL,
			1454621731UL,
			3485111705UL,
			3099436303UL,
			671266974UL,
			1594198024UL,
			3322730930UL,
			2970347812UL,
			795835527UL,
			1483230225UL,
			3244367275UL,
			3060149565UL,
			1994146192UL,
			31158534UL,
			2563907772UL,
			4023717930UL,
			1907459465UL,
			112637215UL,
			2680153253UL,
			3904427059UL,
			2013776290UL,
			251722036UL,
			2517215374UL,
			3775830040UL,
			2137656763UL,
			141376813UL,
			2439277719UL,
			3865271297UL,
			1802195444UL,
			476864866UL,
			2238001368UL,
			4066508878UL,
			1812370925UL,
			453092731UL,
			2181625025UL,
			4111451223UL,
			1706088902UL,
			314042704UL,
			2344532202UL,
			4240017532UL,
			1658658271UL,
			366619977UL,
			2362670323UL,
			4224994405UL,
			1303535960UL,
			984961486UL,
			2747007092UL,
			3569037538UL,
			1256170817UL,
			1037604311UL,
			2765210733UL,
			3554079995UL,
			1131014506UL,
			879679996UL,
			2909243462UL,
			3663771856UL,
			1141124467UL,
			855842277UL,
			2852801631UL,
			3708648649UL,
			1342533948UL,
			654459306UL,
			3188396048UL,
			3373015174UL,
			1466479909UL,
			544179635UL,
			3110523913UL,
			3462522015UL,
			1591671054UL,
			702138776UL,
			2966460450UL,
			3352799412UL,
			1504918807UL,
			783551873UL,
			3082640443UL,
			3233442989UL,
			3988292384UL,
			2596254646UL,
			62317068UL,
			1957810842UL,
			3939845945UL,
			2647816111UL,
			81470997UL,
			1943803523UL,
			3814918930UL,
			2489596804UL,
			225274430UL,
			2053790376UL,
			3826175755UL,
			2466906013UL,
			167816743UL,
			2097651377UL,
			4027552580UL,
			2265490386UL,
			503444072UL,
			1762050814UL,
			4150417245UL,
			2154129355UL,
			426522225UL,
			1852507879UL,
			4275313526UL,
			2312317920UL,
			282753626UL,
			1742555852UL,
			4189708143UL,
			2394877945UL,
			397917763UL,
			1622183637UL,
			3604390888UL,
			2714866558UL,
			953729732UL,
			1340076626UL,
			3518719985UL,
			2797360999UL,
			1068828381UL,
			1219638859UL,
			3624741850UL,
			2936675148UL,
			906185462UL,
			1090812512UL,
			3747672003UL,
			2825379669UL,
			829329135UL,
			1181335161UL,
			3412177804UL,
			3160834842UL,
			628085408UL,
			1382605366UL,
			3423369109UL,
			3138078467UL,
			570562233UL,
			1426400815UL,
			3317316542UL,
			2998733608UL,
			733239954UL,
			1555261956UL,
			3268935591UL,
			3050360625UL,
			752459403UL,
			1541320221UL,
			2607071920UL,
			3965973030UL,
			1969922972UL,
			40735498UL,
			2617837225UL,
			3943577151UL,
			1913087877UL,
			83908371UL,
			2512341634UL,
			3803740692UL,
			2075208622UL,
			213261112UL,
			2463272603UL,
			3855990285UL,
			2094854071UL,
			198958881UL,
			2262029012UL,
			4057260610UL,
			1759359992UL,
			534414190UL,
			2176718541UL,
			4139329115UL,
			1873836001UL,
			414664567UL,
			2282248934UL,
			4279200368UL,
			1711684554UL,
			285281116UL,
			2405801727UL,
			4167216745UL,
			1634467795UL,
			376229701UL,
			2685067896UL,
			3608007406UL,
			1308918612UL,
			956543938UL,
			2808555105UL,
			3495958263UL,
			1231636301UL,
			1047427035UL,
			2932959818UL,
			3654703836UL,
			1088359270UL,
			936918000UL,
			2847714899UL,
			3736837829UL,
			1202900863UL,
			817233897UL,
			3183342108UL,
			3401237130UL,
			1404277552UL,
			615818150UL,
			3134207493UL,
			3453421203UL,
			1423857449UL,
			601450431UL,
			3009837614UL,
			3294710456UL,
			1567103746UL,
			711928724UL,
			3020668471UL,
			3272380065UL,
			1510334235UL,
			755167117UL
		};

		// Token: 0x04000667 RID: 1639
		private static readonly ulong[] crc32tableBigEndian = new ulong[]
		{
			0UL,
			2519730039UL,
			744558318UL,
			3125873049UL,
			432303367UL,
			2415159920UL,
			900031465UL,
			2744476830UL,
			847829774UL,
			2763578489UL,
			518641120UL,
			2295976599UL,
			726447625UL,
			3179065726UL,
			120436967UL,
			2434645904UL,
			1678817053UL,
			4062228586UL,
			1215412723UL,
			3728850564UL,
			2111101466UL,
			3957644653UL,
			1370871028UL,
			3347436419UL,
			1452829715UL,
			3232263012UL,
			2063164157UL,
			3972621706UL,
			1331429652UL,
			3647735395UL,
			1664946170UL,
			4111272077UL,
			3357568571UL,
			1578133836UL,
			3829489877UL,
			1920034722UL,
			3521381180UL,
			1205077067UL,
			4253355474UL,
			1807026853UL,
			4205360437UL,
			1821946434UL,
			3603545051UL,
			1090108588UL,
			3815561266UL,
			1969020741UL,
			3473790684UL,
			1497223595UL,
			2888882470UL,
			973135441UL,
			2152847304UL,
			375509183UL,
			3052712993UL,
			600093526UL,
			2576726735UL,
			262520248UL,
			2662859304UL,
			143131999UL,
			3000569030UL,
			619252657UL,
			2273079087UL,
			290220120UL,
			2870829505UL,
			1026385590UL,
			2420235382UL,
			108124929UL,
			3156267672UL,
			705746415UL,
			2307240305UL,
			532002310UL,
			2783231903UL,
			869578984UL,
			2731083640UL,
			888733711UL,
			2393377174UL,
			412618465UL,
			3138218623UL,
			759000328UL,
			2540463249UL,
			22832102UL,
			4098976619UL,
			1650551836UL,
			3627050373UL,
			1308648178UL,
			3985966700UL,
			2074411291UL,
			3253995650UL,
			1472466933UL,
			3336155237UL,
			1357494034UL,
			3937975947UL,
			2089335292UL,
			3743276386UL,
			1227741717UL,
			4085044108UL,
			1699534075UL,
			1482797645UL,
			3461461306UL,
			1946205347UL,
			3794844628UL,
			1101389642UL,
			3616921661UL,
			1841615268UL,
			4227126995UL,
			1793681731UL,
			4242107956UL,
			1183344557UL,
			3501744346UL,
			1932330052UL,
			3843883827UL,
			1598818986UL,
			3380350429UL,
			1014039888UL,
			2856387111UL,
			269487038UL,
			2250247369UL,
			632645719UL,
			3011866400UL,
			164914873UL,
			2682544590UL,
			251256414UL,
			2563365161UL,
			580440240UL,
			3030964167UL,
			389919577UL,
			2165158958UL,
			995933623UL,
			2909584064UL,
			545503469UL,
			3065233306UL,
			216184323UL,
			2597499252UL,
			961009130UL,
			2943865501UL,
			354867972UL,
			2199313523UL,
			302736355UL,
			2218484884UL,
			1047162125UL,
			2824497786UL,
			198119140UL,
			2650737043UL,
			665714698UL,
			2979923837UL,
			1150488560UL,
			3533899911UL,
			1760690462UL,
			4274128489UL,
			1566008055UL,
			3412551040UL,
			1899392025UL,
			3875957614UL,
			1981535486UL,
			3760968585UL,
			1518000656UL,
			3427458407UL,
			1876933113UL,
			4193238670UL,
			1136572183UL,
			3582898272UL,
			3903051478UL,
			2123616673UL,
			3301103672UL,
			1391648591UL,
			4050107345UL,
			1733803174UL,
			3708204351UL,
			1261875784UL,
			3660254680UL,
			1276840623UL,
			4132045622UL,
			1618609217UL,
			3287245023UL,
			1440704424UL,
			4019088945UL,
			2042521926UL,
			2360566219UL,
			444819132UL,
			2698145573UL,
			920807506UL,
			2507607244UL,
			54987707UL,
			3105227298UL,
			791020885UL,
			3191585477UL,
			671858098UL,
			2455417899UL,
			74101596UL,
			2818561986UL,
			835702965UL,
			2342443308UL,
			497999451UL,
			2965529755UL,
			653419500UL,
			2627955317UL,
			177433858UL,
			2835745180UL,
			1060507371UL,
			2238121842UL,
			324468741UL,
			2185936789UL,
			343587042UL,
			2922099067UL,
			941340172UL,
			2609828498UL,
			230610405UL,
			3085950076UL,
			568318731UL,
			3570586502UL,
			1122161905UL,
			4172537192UL,
			1854134815UL,
			3440819841UL,
			1529264630UL,
			3782717551UL,
			2001188632UL,
			3864660104UL,
			1885999103UL,
			3392865894UL,
			1544225041UL,
			4288570767UL,
			1773036280UL,
			3556731745UL,
			1171221526UL,
			2028079776UL,
			4006743511UL,
			1417872462UL,
			3266511673UL,
			1629906855UL,
			4145438928UL,
			1296525641UL,
			3682037310UL,
			1248514478UL,
			3696940761UL,
			1712054080UL,
			4030453815UL,
			1403960489UL,
			3315514334UL,
			2144318023UL,
			3925849392UL,
			485670333UL,
			2328017610UL,
			814986067UL,
			2795746340UL,
			87478458UL,
			2466699213UL,
			693624404UL,
			3211254051UL,
			779773619UL,
			3091882436UL,
			35350621UL,
			2485874474UL,
			935201716UL,
			2710441155UL,
			467600730UL,
			2381251117UL
		};

		// Token: 0x04000668 RID: 1640
		private static readonly ulong[] crc32Table = BitConverter.IsLittleEndian ? Crc32.crc32TableLittleEndian : Crc32.crc32tableBigEndian;

		// Token: 0x04000669 RID: 1641
		private readonly uint seed;

		// Token: 0x0400066A RID: 1642
		private readonly uint[] table;

		// Token: 0x0400066B RID: 1643
		private uint hash;
	}
}
